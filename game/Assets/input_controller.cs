//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/input_controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_controller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""input_controller"",
    ""maps"": [
        {
            ""name"": ""main"",
            ""id"": ""268d8aaa-b4d2-421f-896d-b309d3787073"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95d7a530-5c88-4fec-95cc-3be13257f35a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""89b972fa-5c8e-4a02-8cad-2d88e390664b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftclick"",
                    ""type"": ""Button"",
                    ""id"": ""36ac0cd4-6830-40d0-9f27-e1fa99916637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d993a26-2620-4178-9469-5df52b40dd36"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""57f02e36-e070-4df2-80c4-a45e06a121dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41f773e4-8efa-457a-8749-b4465273e8ed"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d91aaf6f-7f95-4a03-863d-82226a92416e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8110fd97-c3dc-4c04-bc6a-f207a6010f1c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""60f9c1bc-1148-4dde-907e-7406608281c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7c83f248-ea84-4541-aade-72ece2833030"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // main
        m_main = asset.FindActionMap("main", throwIfNotFound: true);
        m_main_Turn = m_main.FindAction("Turn", throwIfNotFound: true);
        m_main_Action = m_main.FindAction("Action", throwIfNotFound: true);
        m_main_leftclick = m_main.FindAction("leftclick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // main
    private readonly InputActionMap m_main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_main_Turn;
    private readonly InputAction m_main_Action;
    private readonly InputAction m_main_leftclick;
    public struct MainActions
    {
        private @Input_controller m_Wrapper;
        public MainActions(@Input_controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_main_Turn;
        public InputAction @Action => m_Wrapper.m_main_Action;
        public InputAction @leftclick => m_Wrapper.m_main_leftclick;
        public InputActionMap Get() { return m_Wrapper.m_main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_MainActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnTurn;
                @Action.started -= m_Wrapper.m_MainActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnAction;
                @leftclick.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftclick;
                @leftclick.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftclick;
                @leftclick.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLeftclick;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @leftclick.started += instance.OnLeftclick;
                @leftclick.performed += instance.OnLeftclick;
                @leftclick.canceled += instance.OnLeftclick;
            }
        }
    }
    public MainActions @main => new MainActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnLeftclick(InputAction.CallbackContext context);
    }
}
